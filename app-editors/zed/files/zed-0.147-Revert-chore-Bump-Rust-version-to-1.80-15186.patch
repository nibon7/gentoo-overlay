From 5b5a0fb99c2e9cfd0f3a3c406818a1978bca05b6 Mon Sep 17 00:00:00 2001
From: nibon7 <nibon7@163.com>
Date: Thu, 8 Aug 2024 20:27:42 +0800
Subject: [PATCH] Revert "chore: Bump Rust version to 1.80 (#15186)"

This reverts commit 0d5de88c4b5ad369fa41953a9831db3f27868b09.
---
 Dockerfile                                    |  2 +-
 .../src/slash_command/diagnostics_command.rs  |  2 +-
 .../src/slash_command/file_command.rs         |  2 +-
 crates/editor/src/editor.rs                   | 18 +++++++++++++----
 crates/editor/src/selections_collection.rs    |  4 ++--
 crates/editor/src/test/editor_test_context.rs |  2 +-
 crates/file_finder/src/file_finder.rs         | 20 +++++++++----------
 crates/fuzzy/src/matcher.rs                   |  7 +------
 crates/fuzzy/src/paths.rs                     |  2 +-
 .../gpui/src/platform/linux/wayland/client.rs |  2 --
 .../gpui/src/platform/linux/wayland/window.rs |  1 -
 crates/gpui/src/shared_string.rs              |  2 +-
 crates/language/src/buffer.rs                 |  4 ++--
 crates/language/src/language.rs               |  2 +-
 crates/lsp/src/lsp.rs                         |  2 +-
 crates/markdown/src/markdown.rs               | 11 +++++++++-
 crates/multi_buffer/src/multi_buffer.rs       |  2 +-
 crates/project/src/project.rs                 |  2 +-
 crates/rich_text/src/rich_text.rs             | 15 +++++++++++++-
 crates/tab_switcher/src/tab_switcher.rs       |  2 +-
 crates/worktree/src/worktree.rs               |  4 ++--
 rust-toolchain.toml                           |  2 +-
 22 files changed, 67 insertions(+), 43 deletions(-)

diff --git a/Dockerfile b/Dockerfile
index 7d4b6b77c9..6c8d3dab3b 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,6 +1,6 @@
 # syntax = docker/dockerfile:1.2
 
-FROM rust:1.80-bookworm as builder
+FROM rust:1.79-bookworm as builder
 WORKDIR app
 COPY . .
 
diff --git a/crates/assistant/src/slash_command/diagnostics_command.rs b/crates/assistant/src/slash_command/diagnostics_command.rs
index 1e9d0503a0..723deb1f1a 100644
--- a/crates/assistant/src/slash_command/diagnostics_command.rs
+++ b/crates/assistant/src/slash_command/diagnostics_command.rs
@@ -33,7 +33,7 @@ impl DiagnosticsSlashCommand {
         if query.is_empty() {
             let workspace = workspace.read(cx);
             let entries = workspace.recent_navigation_history(Some(10), cx);
-            let path_prefix: Arc<str> = Arc::default();
+            let path_prefix: Arc<str> = "".into();
             Task::ready(
                 entries
                     .into_iter()
diff --git a/crates/assistant/src/slash_command/file_command.rs b/crates/assistant/src/slash_command/file_command.rs
index af35bacd2a..b467dbd937 100644
--- a/crates/assistant/src/slash_command/file_command.rs
+++ b/crates/assistant/src/slash_command/file_command.rs
@@ -29,7 +29,7 @@ impl FileSlashCommand {
             let workspace = workspace.read(cx);
             let project = workspace.project().read(cx);
             let entries = workspace.recent_navigation_history(Some(10), cx);
-            let path_prefix: Arc<str> = Arc::default();
+            let path_prefix: Arc<str> = "".into();
             Task::ready(
                 entries
                     .into_iter()
diff --git a/crates/editor/src/editor.rs b/crates/editor/src/editor.rs
index 00738093cb..c5977f24e3 100644
--- a/crates/editor/src/editor.rs
+++ b/crates/editor/src/editor.rs
@@ -408,7 +408,6 @@ impl EditorActionId {
 type BackgroundHighlight = (fn(&ThemeColors) -> Hsla, Arc<[Range<Anchor>]>);
 type GutterHighlight = (fn(&AppContext) -> Hsla, Arc<[Range<Anchor>]>);
 
-#[derive(Default)]
 struct ScrollbarMarkerState {
     scrollbar_size: Size<Pixels>,
     dirty: bool,
@@ -422,6 +421,17 @@ impl ScrollbarMarkerState {
     }
 }
 
+impl Default for ScrollbarMarkerState {
+    fn default() -> Self {
+        Self {
+            scrollbar_size: Size::default(),
+            dirty: false,
+            markers: Arc::from([]),
+            pending_refresh: None,
+        }
+    }
+}
+
 #[derive(Clone, Debug)]
 struct RunnableTasks {
     templates: Vec<(TaskSourceKind, TaskTemplate)>,
@@ -5717,7 +5727,7 @@ impl Editor {
 
         self.transact(cx, |this, cx| {
             this.buffer.update(cx, |buffer, cx| {
-                let empty_str: Arc<str> = Arc::default();
+                let empty_str: Arc<str> = "".into();
                 buffer.edit(
                     deletion_ranges
                         .into_iter()
@@ -5783,7 +5793,7 @@ impl Editor {
 
         self.transact(cx, |this, cx| {
             let buffer = this.buffer.update(cx, |buffer, cx| {
-                let empty_str: Arc<str> = Arc::default();
+                let empty_str: Arc<str> = "".into();
                 buffer.edit(
                     edit_ranges
                         .into_iter()
@@ -8084,7 +8094,7 @@ impl Editor {
             let mut selection_edit_ranges = Vec::new();
             let mut last_toggled_row = None;
             let snapshot = this.buffer.read(cx).read(cx);
-            let empty_str: Arc<str> = Arc::default();
+            let empty_str: Arc<str> = "".into();
             let mut suffixes_inserted = Vec::new();
 
             fn comment_prefix_range(
diff --git a/crates/editor/src/selections_collection.rs b/crates/editor/src/selections_collection.rs
index 7ce3a93012..4161792af5 100644
--- a/crates/editor/src/selections_collection.rs
+++ b/crates/editor/src/selections_collection.rs
@@ -44,7 +44,7 @@ impl SelectionsCollection {
             buffer,
             next_selection_id: 1,
             line_mode: false,
-            disjoint: Arc::default(),
+            disjoint: Arc::from([]),
             pending: Some(PendingSelection {
                 selection: Selection {
                     id: 0,
@@ -398,7 +398,7 @@ impl<'a> MutableSelectionsCollection<'a> {
     }
 
     pub fn clear_disjoint(&mut self) {
-        self.collection.disjoint = Arc::default();
+        self.collection.disjoint = Arc::from([]);
     }
 
     pub fn delete(&mut self, selection_id: usize) {
diff --git a/crates/editor/src/test/editor_test_context.rs b/crates/editor/src/test/editor_test_context.rs
index 89a47eaa03..302d012885 100644
--- a/crates/editor/src/test/editor_test_context.rs
+++ b/crates/editor/src/test/editor_test_context.rs
@@ -327,7 +327,7 @@ impl EditorTestContext {
                 .background_highlights
                 .get(&TypeId::of::<Tag>())
                 .map(|h| h.1.clone())
-                .unwrap_or_else(|| Arc::default())
+                .unwrap_or_else(|| Arc::from([]))
                 .into_iter()
                 .map(|range| range.to_offset(&snapshot.buffer_snapshot))
                 .collect()
diff --git a/crates/file_finder/src/file_finder.rs b/crates/file_finder/src/file_finder.rs
index 54732d4bcb..2387c2c6a5 100644
--- a/crates/file_finder/src/file_finder.rs
+++ b/crates/file_finder/src/file_finder.rs
@@ -999,7 +999,7 @@ mod tests {
                 positions: Vec::new(),
                 worktree_id: 0,
                 path: Arc::from(Path::new("b0.5")),
-                path_prefix: Arc::default(),
+                path_prefix: Arc::from(""),
                 distance_to_relative_ancestor: 0,
             }),
             ProjectPanelOrdMatch(PathMatch {
@@ -1007,7 +1007,7 @@ mod tests {
                 positions: Vec::new(),
                 worktree_id: 0,
                 path: Arc::from(Path::new("c1.0")),
-                path_prefix: Arc::default(),
+                path_prefix: Arc::from(""),
                 distance_to_relative_ancestor: 0,
             }),
             ProjectPanelOrdMatch(PathMatch {
@@ -1015,7 +1015,7 @@ mod tests {
                 positions: Vec::new(),
                 worktree_id: 0,
                 path: Arc::from(Path::new("a1.0")),
-                path_prefix: Arc::default(),
+                path_prefix: Arc::from(""),
                 distance_to_relative_ancestor: 0,
             }),
             ProjectPanelOrdMatch(PathMatch {
@@ -1023,7 +1023,7 @@ mod tests {
                 positions: Vec::new(),
                 worktree_id: 0,
                 path: Arc::from(Path::new("a0.5")),
-                path_prefix: Arc::default(),
+                path_prefix: Arc::from(""),
                 distance_to_relative_ancestor: 0,
             }),
             ProjectPanelOrdMatch(PathMatch {
@@ -1031,7 +1031,7 @@ mod tests {
                 positions: Vec::new(),
                 worktree_id: 0,
                 path: Arc::from(Path::new("b1.0")),
-                path_prefix: Arc::default(),
+                path_prefix: Arc::from(""),
                 distance_to_relative_ancestor: 0,
             }),
         ];
@@ -1045,7 +1045,7 @@ mod tests {
                     positions: Vec::new(),
                     worktree_id: 0,
                     path: Arc::from(Path::new("a1.0")),
-                    path_prefix: Arc::default(),
+                    path_prefix: Arc::from(""),
                     distance_to_relative_ancestor: 0,
                 }),
                 ProjectPanelOrdMatch(PathMatch {
@@ -1053,7 +1053,7 @@ mod tests {
                     positions: Vec::new(),
                     worktree_id: 0,
                     path: Arc::from(Path::new("b1.0")),
-                    path_prefix: Arc::default(),
+                    path_prefix: Arc::from(""),
                     distance_to_relative_ancestor: 0,
                 }),
                 ProjectPanelOrdMatch(PathMatch {
@@ -1061,7 +1061,7 @@ mod tests {
                     positions: Vec::new(),
                     worktree_id: 0,
                     path: Arc::from(Path::new("c1.0")),
-                    path_prefix: Arc::default(),
+                    path_prefix: Arc::from(""),
                     distance_to_relative_ancestor: 0,
                 }),
                 ProjectPanelOrdMatch(PathMatch {
@@ -1069,7 +1069,7 @@ mod tests {
                     positions: Vec::new(),
                     worktree_id: 0,
                     path: Arc::from(Path::new("a0.5")),
-                    path_prefix: Arc::default(),
+                    path_prefix: Arc::from(""),
                     distance_to_relative_ancestor: 0,
                 }),
                 ProjectPanelOrdMatch(PathMatch {
@@ -1077,7 +1077,7 @@ mod tests {
                     positions: Vec::new(),
                     worktree_id: 0,
                     path: Arc::from(Path::new("b0.5")),
-                    path_prefix: Arc::default(),
+                    path_prefix: Arc::from(""),
                     distance_to_relative_ancestor: 0,
                 }),
             ]
diff --git a/crates/fuzzy/src/matcher.rs b/crates/fuzzy/src/matcher.rs
index d3b02086c9..9b0d62893b 100644
--- a/crates/fuzzy/src/matcher.rs
+++ b/crates/fuzzy/src/matcher.rs
@@ -404,12 +404,7 @@ mod tests {
 
     #[test]
     fn test_match_multibyte_path_entries() {
-        let paths = vec![
-            "aαbβ/cγdδ",
-            "αβγδ/bcde",
-            "c1️⃣2️⃣3️⃣/d4️⃣5️⃣6️⃣/e7️⃣8️⃣9️⃣/f",
-            "/d/🆒/h",
-        ];
+        let paths = vec!["aαbβ/cγdδ", "αβγδ/bcde", "c1️⃣2️⃣3️⃣/d4️⃣5️⃣6️⃣/e7️⃣8️⃣9️⃣/f", "/d/🆒/h"];
         assert_eq!("1️⃣".len(), 7);
         assert_eq!(
             match_single_path_query("bcd", false, &paths),
diff --git a/crates/fuzzy/src/paths.rs b/crates/fuzzy/src/paths.rs
index 73192517e5..25927f1829 100644
--- a/crates/fuzzy/src/paths.rs
+++ b/crates/fuzzy/src/paths.rs
@@ -120,7 +120,7 @@ pub fn match_fixed_path_set(
             worktree_id,
             positions: Vec::new(),
             path: Arc::from(candidate.path),
-            path_prefix: Arc::default(),
+            path_prefix: Arc::from(""),
             distance_to_relative_ancestor: usize::MAX,
         },
     );
diff --git a/crates/gpui/src/platform/linux/wayland/client.rs b/crates/gpui/src/platform/linux/wayland/client.rs
index 5e6ede0c92..5b67bceac5 100644
--- a/crates/gpui/src/platform/linux/wayland/client.rs
+++ b/crates/gpui/src/platform/linux/wayland/client.rs
@@ -395,7 +395,6 @@ impl WaylandClient {
         let qh = event_queue.handle();
 
         let mut seat: Option<wl_seat::WlSeat> = None;
-        #[allow(clippy::mutable_key_type)]
         let mut in_progress_outputs = HashMap::default();
         globals.contents().with_list(|list| {
             for global in list {
@@ -879,7 +878,6 @@ impl Dispatch<wl_surface::WlSurface, ()> for WaylandClientStatePtr {
         let Some(window) = get_window(&mut state, &surface.id()) else {
             return;
         };
-        #[allow(clippy::mutable_key_type)]
         let outputs = state.outputs.clone();
         drop(state);
 
diff --git a/crates/gpui/src/platform/linux/wayland/window.rs b/crates/gpui/src/platform/linux/wayland/window.rs
index 2bd57adafc..964f28604f 100644
--- a/crates/gpui/src/platform/linux/wayland/window.rs
+++ b/crates/gpui/src/platform/linux/wayland/window.rs
@@ -542,7 +542,6 @@ impl WaylandWindowStatePtr {
         }
     }
 
-    #[allow(clippy::mutable_key_type)]
     pub fn handle_surface_event(
         &self,
         event: wl_surface::Event,
diff --git a/crates/gpui/src/shared_string.rs b/crates/gpui/src/shared_string.rs
index a4ed36ec21..36680943f4 100644
--- a/crates/gpui/src/shared_string.rs
+++ b/crates/gpui/src/shared_string.rs
@@ -11,7 +11,7 @@ pub struct SharedString(ArcCow<'static, str>);
 
 impl Default for SharedString {
     fn default() -> Self {
-        Self(ArcCow::Owned(Arc::default()))
+        Self(ArcCow::Owned("".into()))
     }
 }
 
diff --git a/crates/language/src/buffer.rs b/crates/language/src/buffer.rs
index 27e6222f03..0d2ed42c54 100644
--- a/crates/language/src/buffer.rs
+++ b/crates/language/src/buffer.rs
@@ -1402,7 +1402,7 @@ impl Buffer {
                 LineEnding::normalize(&mut new_text);
 
                 let diff = TextDiff::from_chars(old_text.as_str(), new_text.as_str());
-                let empty: Arc<str> = Arc::default();
+                let empty: Arc<str> = "".into();
 
                 let mut edits = Vec::new();
                 let mut old_offset = 0;
@@ -1720,7 +1720,7 @@ impl Buffer {
             .get(&self.text.replica_id())
             .map_or(true, |set| !set.selections.is_empty())
         {
-            self.set_active_selections(Arc::default(), false, Default::default(), cx);
+            self.set_active_selections(Arc::from([]), false, Default::default(), cx);
         }
     }
 
diff --git a/crates/language/src/language.rs b/crates/language/src/language.rs
index 03f14321ad..c07090fd95 100644
--- a/crates/language/src/language.rs
+++ b/crates/language/src/language.rs
@@ -682,7 +682,7 @@ impl<T> Override<T> {
 impl Default for LanguageConfig {
     fn default() -> Self {
         Self {
-            name: Arc::default(),
+            name: "".into(),
             code_fence_block_name: None,
             grammar: None,
             matcher: LanguageMatcher::default(),
diff --git a/crates/lsp/src/lsp.rs b/crates/lsp/src/lsp.rs
index 30feffad97..d3cce5dbe3 100644
--- a/crates/lsp/src/lsp.rs
+++ b/crates/lsp/src/lsp.rs
@@ -389,7 +389,7 @@ impl LanguageServer {
             notification_handlers,
             response_handlers,
             io_handlers,
-            name: Arc::default(),
+            name: "".into(),
             capabilities: Default::default(),
             code_action_kinds,
             next_id: Default::default(),
diff --git a/crates/markdown/src/markdown.rs b/crates/markdown/src/markdown.rs
index fa2af10ab3..2082a45dcf 100644
--- a/crates/markdown/src/markdown.rs
+++ b/crates/markdown/src/markdown.rs
@@ -248,7 +248,7 @@ impl Selection {
     }
 }
 
-#[derive(Clone, Default)]
+#[derive(Clone)]
 pub struct ParsedMarkdown {
     source: SharedString,
     events: Arc<[(Range<usize>, MarkdownEvent)]>,
@@ -264,6 +264,15 @@ impl ParsedMarkdown {
     }
 }
 
+impl Default for ParsedMarkdown {
+    fn default() -> Self {
+        Self {
+            source: SharedString::default(),
+            events: Arc::from([]),
+        }
+    }
+}
+
 pub struct MarkdownElement {
     markdown: View<Markdown>,
     style: MarkdownStyle,
diff --git a/crates/multi_buffer/src/multi_buffer.rs b/crates/multi_buffer/src/multi_buffer.rs
index 1478e254f1..0ee107dcf6 100644
--- a/crates/multi_buffer/src/multi_buffer.rs
+++ b/crates/multi_buffer/src/multi_buffer.rs
@@ -673,7 +673,7 @@ impl MultiBuffer {
                         let mut insertions = Vec::new();
                         let mut original_indent_columns = Vec::new();
                         let mut deletions = Vec::new();
-                        let empty_str: Arc<str> = Arc::default();
+                        let empty_str: Arc<str> = "".into();
                         while let Some(BufferEdit {
                             mut range,
                             new_text,
diff --git a/crates/project/src/project.rs b/crates/project/src/project.rs
index 0ef0efb37f..ac2ce08fd4 100644
--- a/crates/project/src/project.rs
+++ b/crates/project/src/project.rs
@@ -10950,7 +10950,7 @@ impl<'a> fuzzy::PathMatchCandidateSet<'a> for PathMatchCandidateSet {
         } else if self.include_root_name {
             format!("{}/", self.snapshot.root_name()).into()
         } else {
-            Arc::default()
+            "".into()
         }
     }
 
diff --git a/crates/rich_text/src/rich_text.rs b/crates/rich_text/src/rich_text.rs
index 2c4b2ca8ee..16c4473e07 100644
--- a/crates/rich_text/src/rich_text.rs
+++ b/crates/rich_text/src/rich_text.rs
@@ -31,7 +31,7 @@ impl From<HighlightId> for Highlight {
     }
 }
 
-#[derive(Clone, Default)]
+#[derive(Clone)]
 pub struct RichText {
     pub text: SharedString,
     pub highlights: Vec<(Range<usize>, Highlight)>,
@@ -43,6 +43,19 @@ pub struct RichText {
         Option<Arc<dyn Fn(usize, Range<usize>, &mut WindowContext) -> Option<AnyView>>>,
 }
 
+impl Default for RichText {
+    fn default() -> Self {
+        Self {
+            text: SharedString::default(),
+            highlights: Vec::new(),
+            link_ranges: Vec::new(),
+            link_urls: Arc::from([]),
+            custom_ranges: Vec::new(),
+            custom_ranges_tooltip_fn: None,
+        }
+    }
+}
+
 /// Allows one to specify extra links to the rendered markdown, which can be used
 /// for e.g. mentions.
 #[derive(Debug)]
diff --git a/crates/tab_switcher/src/tab_switcher.rs b/crates/tab_switcher/src/tab_switcher.rs
index fe8227f661..5002ee8828 100644
--- a/crates/tab_switcher/src/tab_switcher.rs
+++ b/crates/tab_switcher/src/tab_switcher.rs
@@ -273,7 +273,7 @@ impl PickerDelegate for TabSwitcherDelegate {
     type ListItem = ListItem;
 
     fn placeholder_text(&self, _cx: &mut WindowContext) -> Arc<str> {
-        Arc::default()
+        "".into()
     }
 
     fn no_matches_text(&self, _cx: &mut WindowContext) -> SharedString {
diff --git a/crates/worktree/src/worktree.rs b/crates/worktree/src/worktree.rs
index bfe952b38a..1b36d71361 100644
--- a/crates/worktree/src/worktree.rs
+++ b/crates/worktree/src/worktree.rs
@@ -510,7 +510,7 @@ impl Worktree {
                                 }
                             }
                         };
-                        cx.emit(Event::UpdatedEntries(Arc::default()));
+                        cx.emit(Event::UpdatedEntries(Arc::from([])));
                         cx.notify();
                         while let Some((scan_id, _)) = this.snapshot_subscriptions.front() {
                             if this.observed_snapshot(*scan_id) {
@@ -1698,7 +1698,7 @@ impl LocalWorktree {
         let (snapshots_tx, mut snapshots_rx) =
             mpsc::unbounded::<(LocalSnapshot, UpdatedEntriesSet, UpdatedGitRepositoriesSet)>();
         snapshots_tx
-            .unbounded_send((self.snapshot(), Arc::default(), Arc::default()))
+            .unbounded_send((self.snapshot(), Arc::from([]), Arc::from([])))
             .ok();
 
         let worktree_id = cx.entity_id().as_u64();
diff --git a/rust-toolchain.toml b/rust-toolchain.toml
index 9c975c4b4b..8d422bd518 100644
--- a/rust-toolchain.toml
+++ b/rust-toolchain.toml
@@ -1,5 +1,5 @@
 [toolchain]
-channel = "1.80"
+channel = "1.79"
 profile = "minimal"
 components = [ "rustfmt", "clippy" ]
 targets = [ "x86_64-apple-darwin", "aarch64-apple-darwin", "x86_64-unknown-linux-gnu", "wasm32-wasi" ]
-- 
2.44.2

